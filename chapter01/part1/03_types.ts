/*************** 1.字面量 ***************/
// 也可以直接使用字面量进行类型声明，这样有点像常量的意思，这样用法一般很少，应用场景可以用|来连接多个类型如下：
let a: 10; // 10表示a的类型
a = 10; // 正确
// a = 11; // 报错 指定类型的值就是10了

// 可以使用 |(或的意思) 来连接多个类型(联合类型)
let b: "male" | "female";
b = "male"; // 正确
b = "female" // 正确

let c: boolean | string;
c = true; // 正确
c = "hello"; // 正确




/*************** 2.any ***************/
// any 表示任意类型，一个变量设置类型为any时，相当于对该变量关闭了ts的类型检测
// 使用ts中，"不建议" 使用any

// let d: any; // 显示any
// 声明变量如果不指定类型,则TS解析器会自动判断变量的类型为any （隐式的any）
let d; // 隐式的any
d = 10;
d = 'hello';
d = true;




/*************** 3.unknown ***************/
// (1) unknown: 表示未知类型的值
let e: unknown;
e = 10;
e = 'hello';
e = true;

// (2) any与unknown的区别：
// unknown只会祸祸自己
// any会祸祸别人
let s: string;
// d的类型是any，它可以赋值给任意变量
// s = d; // 正确

e = 'hello';
// unknown 实际上就是一个类型安全的any
// unknown 类型的变量，不能直接赋值给其他变量
// 解决报错两种方法：(1) 加判断 (2) 类型断言 直接告诉编译器e是字符串
if(typeof e === "string") {
    // 把一个未知的类型 赋值给string 会有提示报错
    s = e;  
}

// (3) 总结：当遇到类型不确定变量的时候，能用unknown尽量用



/*************** 3.1 断言(补充) ***************/
// 类型断言,就是直接告诉编译器 e它就是字符串，放心用
/**
 * 语法：
 * 第一种写法：变量 as 类型
 * 第二种写法：<类型>变量
 */
// 两种写法：
s = e as string
s = <string>e;


/*************** 4.void:设置函数返回值 ***************/
// function fn() : number {
//     return 123
// }
// void 用来表示空，以函数为例，就表示没有返回值的函数
function fn(num) : void{
    // return 123; // 报错 只要return 后面写东西了就报错了
    // return null 不报错 返回undefined '' 不会报错
    return;
}


/*************** 5.never ***************/
// never表示永远不会返回结果
function fn2(): never {
    // 这个函数只要一调用就会报错，程序一旦报错，代码立即结束，立即结束就没有返回值了
    throw new Error("报错了")
}